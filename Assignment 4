#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// a struct to keep frequency and binary code representation of a character
typedef struct code{
  unsigned int freq;
  char *binary_code;
} Code;

typedef struct node{
   char character;
   int frequency;
   struct node *left, *right;
}Node;

typedef struct heapCode{
	int capacity;
	int size;
	Node **array;
}Heap;

int parent(Heap *myHeap, int index){
	int parentIndex = (int)((index-1)/2);
	return parentIndex;
}

Heap *initialize(int capacity){
	Heap *myHeap = malloc(sizeof(Heap));
	myHeap->capacity = capacity;
	myHeap->size=0;
	myHeap->array = malloc(sizeof(Node*)*capacity);
	return myHeap;
}

void swap(Node **array, int one, int two)
{
	Node* temp = array[one];
	array[one] = array[two];
	array[two] = temp;
}

void insert(Heap *myHeap, Node *node){
	myHeap->array[myHeap->size]= node;
	upheap(myHeap,myHeap->size);
	myHeap->size++;
}

void upheap(Heap *myHeap, int index){
	if(index == 0)
		return;
   int parentIndex = parent(myHeap, index);
	Node *parentNode = myHeap->array[parentIndex];
   Node *currentNode = myHeap->array[index];
	if (parentNode->frequency <= currentNode->frequency)
      return; 
   swap(myHeap->array, index, parentIndex);
   upheap(myHeap, parentIndex);
}

void deletemin(Heap *myHeap) 
{
    swap(myHeap->array, 0, myHeap->size - 1);
    myHeap->size--;
    downheap(myHeap, 0);
}

int minChildIndex(Heap *myHeap, int index){
	if(myHeap->size-1 >= (index+1)*2){
		if(myHeap->array[(index+1)*2]->frequency>=myHeap->array[(index+1)*2-1]->frequency)
			return (index+1)*2-1;
		else
			return (index+1)*2;
}
	else if(myHeap->size-1 == (index+1)*2-1)
		return (index+1)*2-1;
	else
		return -1;
}

void downheap(Heap *myHeap, int index){
    if (myHeap->size - 1 < (index + 1) * 2 - 1) 
        return; 
    int minChild = minChildIndex(myHeap, index);

    if (myHeap->array[index]->frequency <= myHeap->array[minChild]->frequency)
        return; 

    swap(myHeap->array, index, minChild);
    downheap(myHeap, minChild);
}

Node* initializeNode(char character, int frequency, Node *left, Node *right)
{
    Node *node = malloc(sizeof(Node));
    node->character = character;
    node->frequency = frequency;
    node->left = left;
    node->right = right;
    return node;
}

Node* buildTree(Heap *myHeap)
{
    while (myHeap->size > 1)
    {
        Node *left = myHeap->array[0];
        deletemin(myHeap);  
        Node *right = myHeap->array[0];
        deletemin(myHeap);  
        Node *combinedNode = initializeNode('\0', left->frequency + right->frequency, left, right);
        insert(myHeap, combinedNode);  
    }
    return myHeap->array[0];  
}

void generateCode(Node *root, int *code, int length, char **codes)
{
    if (root == NULL)
        return;

        code[length] = '0';
        codes[(char)root->character] = malloc((length + 1) * sizeof(char));
        for (int i = 0; i < length; i++)
        {
            if (code[i] == 0) {
                codes[(char)root->character][i] = '0';
            } else {
                codes[(char)root->character][i] = '1';
            }
        }
        codes[(char)root->character][length] = '\0';

    code[length] = 0;
    generateCode(root->left, code, length + 1, codes);

    code[length] = 1;
    generateCode(root->right, code, length + 1, codes);
}

/*
void heapSort(int *list, int size) {
    Heap *myHeap = initialize(size);
    for (int i = 0; i < size; i++) {
        insert(myHeap, node);
    }
    for (int i = 0; i < size; i++) {
        list[i] = myHeap->array[0]->frequency;
        deletemin(myHeap);
    }
}
*/

void freeTree(Node *root) 
{
    if (root == NULL) 
	 	return;
    freeTree(root->left);
    freeTree(root->right);
    free(root);
}

int main(int argc, char **argv)
{
    //argv[1] will be "encode" or "decode" signifying the mode of the program
    //for encode mode
        //argv[2] will be the path to input text file
        //argv[3] will be the path to output code table file
        //argv[4] will be the path to output encoded text file
    //for decode mode
        //argv[2] will be the path to input code table file
        //argv[3] will be the path to input encoded text file
        //argv[4] will be the path to output decoded text file
	 char *inputTextFilePath = argv[2];

    char *codeTableFilePath = argv[3];

    char *encodedTextFilePath = argv[4];    
    /*----------------ENCODER-----------------------*/
    /*----------------------------------------------*/
    /*To read the input text file, you might want to use a code as follows*/

	 if (strcmp(argv[1], "encode") == 0) {

    FILE *inputFile = fopen(inputTextFilePath, "r");
    if (inputFile == NULL)
    {
      printf("Could not open file to read: %s\n",inputTextFilePath);
      return;
    }

	// initialize the code table, which will store the frequency of each character,
	// and eventually the binary code. We are allocating a space of 256 in the
	// table, and the character's ASCII code will serve as hashing the index for
	// that character.
	Code *codeTable = malloc(sizeof(Code)*256);
	//set counters to zero initially
	for(int i = 0; i < 256; i++)
		codeTable[i].freq = 0;

	int totalNumOfCharacters=0;
	int c;
    //read the file character by character
    while ((c = fgetc(inputFile)) != EOF && c!='\n')
    {
    	//increase the frequency of the character by one
		codeTable[c].freq++;
		//increase the total character count
		totalNumOfCharacters++;
    }
    fclose(inputFile);
	
	 int uniqueCharacters = 0;
        for (int i = 0; i < 256; i++) {
            if (codeTable[i].freq > 0) uniqueCharacters++;
        }
        Heap *myHeap = initialize(uniqueCharacters);
        for (int i = 0; i < 256; i++) {
            if (codeTable[i].freq > 0) {
                Node *newNode = initializeNode((char)i, codeTable[i].freq, NULL, NULL);
                insert(myHeap, newNode);
            }
        }
        Node *root = buildTree(myHeap);
        int code[256];
        char *codes[256] = {NULL};
        generateCode(root, code, 0, codes);
    
    //now that you have collected the frequency of each character that is present 
    //in the input file, you need to generate the code table.
    
    // Hint: when initializing the heap to be used in the generation of Huffman
    // 		 tree, keep in mind that you know how many unique characters have
    //		 appeared in the input text. You can get this number by going through
    //		 your codeTable...
    
    /*----------------------------------------------*/
    //to write the code table into the file, you might want to use a code as follows
    FILE *codeTableFile = fopen(codeTableFilePath, "w");
    if (codeTableFile == NULL)
    {
        printf("Could not open file to write: %s\n",codeTableFilePath);
        return;
    }

    // Write the code table into file:
	 /*
    for(int i = numOfCharacters - 1; i >= 0; i--)
    {
      fprintf(codeTableFile, "%c\t%s\t%d\n", characters[i], characterCodes[i], characterFrequencies[i]);
    }
    fclose(codeTableFile);
    */
	 for (int i = 0; i < 256; i++) 
	 {
    if (codeTable[i].freq > 0) {
    	fprintf(codeTableFile, "%c\t%s\t%d\n", i, codes[i], codeTable[i].freq);
    	}
     }

        fclose(codeTableFile);

    /*----------------------------------------------*/

    inputFile = fopen(inputTextFilePath, "r");
    FILE *encodedFile = fopen(encodedTextFilePath, "w");
    int compressed_size = 0;
    while ((c = fgetc(inputFile)) != EOF && c != '\n') {
    	fprintf(encodedFile, "%s", codes[c]);
      compressed_size += strlen(codes[c]);
        }

    fclose(inputFile);
    fclose(encodedFile);

    //To print the statistics about the compression, use print statements as follows
    printf("Original: %d bits\n", totalNumOfCharacters*8); //assuming that you store the number of characters in variable "uncompressed". *8 is because ASCII table uses 8 bits to represent each character
    printf("Compressed: %d bits\n", compressed_size); //assuming that you store the number of bits (i.e., 0/1s) of encoded text in variable "compressed_size"
    printf("Compression Ratio: %.2f%%\n", (float)compressed_size/((float)totalNumOfCharacters*8)*100); //This line will print the compression ration in percentages, up to 2 decimals.
    
    /*----------------------------------------------*/
    //to write encoded version of the text in 0/1 form into text file, you can use a code similar to fprintf statment above that is suggested for writing code table to the file.
    freeTree(root);
    for (int i = 0; i < 256; i++) {
    	if (codes[i]) {
		free(codes[i]);
		}
     }
        free(codeTable);
    } 
    
    /*----------------DECODER-----------------------*/
    /*----------------------------------------------*/
    //When decoding, you will need to:
    //1) read code table: you can use fscanf() function, since the code table file is well structured. Alternatively, you can also use the read statements from above as was used for reading input text file.
    //2) read encoded text, which is a single line consisting of 0/1 characters: This file is better be read character by character, for which you can use a code similar to getc() code above
    //3) write the decoded text into file: for that, you can write it into the file using a code similar to fprintf() usages exemplified above.
}

