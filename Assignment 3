#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define BUFSIZE 256

typedef struct node {
    char *word;
    struct node *next;
} Node;

typedef struct openHashTable {
    int size;
    Node **table;
} OpenHashTable;

unsigned long hash(char *word, int size) {
    unsigned long total = 0;
    for (int i = 0; i < strlen(word); i++) {
        total = total + word[i];
        total = total * 101;
    }
    return total % size;
}

Node *initializeNode(char *word, Node *next) {
    Node *newNode = malloc(sizeof(Node));
    newNode->word = malloc(strlen(word) + 1);
    strcpy(newNode->word, word);
	 newNode->next = next;
    return newNode; 
}

OpenHashTable *initializeHashTable(int size) {
    OpenHashTable *hashTable = malloc(sizeof(OpenHashTable));
    hashTable->size = size;
    hashTable->table = malloc(sizeof(Node *) * size);
    for (int i = 0; i < size; i++) {
        hashTable->table[i] = NULL;
    }
    return hashTable;
}

void insert(OpenHashTable *hashTable, char *word) {
    int position = hash(word, hashTable->size);
    Node *ptr = hashTable->table[position];
    while (ptr != NULL) {
        if (strcmp(ptr->word, word) == 0)
            return;
        ptr = ptr->next;
    }
    hashTable->table[position] = initializeNode(word, hashTable->table[position]);
}

int isMember(OpenHashTable *hashTable, char *word) {
    int position = hash(word, hashTable->size);
    Node *ptr = hashTable->table[position];
    while (ptr != NULL) {
        if (strcmp(ptr->word, word) == 0)
            return 1;
        ptr = ptr->next;
    }
    return 0;
}

void freeHashTable(OpenHashTable *hashTable) {
    for (int i = 0; i < hashTable->size; i++) {
        Node *ptr = hashTable->table[i];
        while (ptr != NULL) {
            Node *temp = ptr;
            ptr = ptr->next;
            free(temp->word);
            free(temp);
        }
    }
    free(hashTable->table);
    free(hashTable);
}

void suggestInvertedLetters(char *word, OpenHashTable *hashTable) {
    int len = strlen(word);
    for (int i = 0; i < len - 1; i++) {
        char temp = word[i];
        word[i] = word[i + 1];
        word[i + 1] = temp;
        if (isMember(hashTable, word)) {
            printf("%s ", word);
        }
        word[i + 1] = word[i];
        word[i] = temp;
    }
}

void suggestMissingLetter(char *word, OpenHashTable *hashTable) {
    int len = strlen(word);
    char temp[BUFSIZE];

    for (char ch = 'a'; ch <= 'z'; ch++) {
        temp[0] = ch;
        strcpy(temp + 1, word);
        if (isMember(hashTable, temp)) {
            printf("%s ", temp);
        }

        strcpy(temp, word);
        temp[len] = ch;
        temp[len + 1] = '\0';
        if (isMember(hashTable, temp)) {
            printf("%s ", temp);
        }
    }
}

void suggestExtraLetter(char *word, OpenHashTable *hashTable) {
    int len = strlen(word);
    char temp[BUFSIZE];

    strcpy(temp, word + 1);
    if (isMember(hashTable, temp)) {
        printf("%s ", temp);
    }

    strcpy(temp, word);
    temp[len - 1] = '\0';
    if (isMember(hashTable, temp)) {
        printf("%s ", temp);
    }
}

int main(int argc, char **argv)
{
	char *dictionaryFilePath = argv[1]; //this keeps the path to the dictionary file file
	char *inputFilePath = argv[2]; //this keeps the path to the input text file
	char *check = argv[3]; // this keeps the flag to whether we should insert mistyped words into dictionary or ignore
	int numOfWords=0; //this variable will tell us how much memory to allocate

	int insertToDictionary;
	if(strcmp(check,"add")==0)
		insertToDictionary = 1;
	else
		insertToDictionary = 0;
    
	////////////////////////////////////////////////////////////////////
	//read dictionary file
    FILE *fp = fopen(dictionaryFilePath, "r");
    char *line = NULL; //variable to be used for line counting
    size_t lineBuffSize = 0; //variable to be used for line counting
    ssize_t lineSize; //variable to be used for line counting

    //check if the file is accessible, just to make sure...
    if(fp == NULL)
    {
        fprintf(stderr, "Error opening file\n");
        exit(1);
    }

    //First, let's count number of words in the dictionary.
    //This will help us know how much memory to allocate for our hash table
    while((lineSize = getline(&line,&lineBuffSize,fp)) !=-1)
        numOfWords++;

    //Printing line count for debugging purposes.
    //You can remove this part from your submission.
    //printf("%d\n",numOfWords);
    
    //HINT: You can initialize your hash table here, since you know the size of the dictionary
    
    OpenHashTable *hashTable = initializeHashTable(numOfWords);

    //rewind file pointer to the beginning of the file, to be able to read it line by line.
    fseek(fp, 0, SEEK_SET);

    char wrd[BUFSIZE];
    for (int i = 0; i < numOfWords; i++)
    {
        fscanf(fp, "%s \n", wrd);
        //You can print the words for Debug purposes, just to make sure you are loading the dictionary as intended
        //printf("%d: %s\n",i,wrd);
        
        //HINT: here is a good place to insert the words into your hash table
	insert(hashTable, wrd);
    }
    fclose(fp);
    
	////////////////////////////////////////////////////////////////////
	//read the input text file word by word
    fp = fopen(inputFilePath, "r");
	
	//check if the file is accessible, just to make sure...
	if(fp == NULL)
	{
		fprintf(stderr, "Error opening file\n");
		return -1;
	}

    //HINT: You can use a flag to indicate if there is a misspleed word or not, which is initially set to 1
	int noTypo=1;

	//read a line from the input file
	while((lineSize = getline(&line,&lineBuffSize,fp)) !=-1)
	{
		char *word;
        //These are the delimiters you are expected to check for. Nothing else is needed here.
		const char delimiter[]= " ,.:;!\n";

		//split the buffer by delimiters to read a single word
		word = strtok(line,delimiter); 
		

		//read the line word by word
		while(word!=NULL)
		{


			if (!isMember(hashTable, word)) {
                	noTypo = 0;
            // You can print the words of the inpit file for Debug purposes, just to make sure you are loading the input text as intended
			//printf("%s\n",word);

            
            // HINT: Since this nested while loop will keep reading the input text word by word, here is a good place to check for misspelled words
            
            
            // INPUT/OUTPUT SPECS: use the following line for printing a "word" that is misspelled.
            printf("Misspelled word: %s\n",word);
            
            // INPUT/OUTPUT SPECS: use the following line for printing suggestions, each of which will be separated by a comma and whitespace.
            printf("Suggestions: "); //the suggested words should follow
                suggestInvertedLetters(word, hashTable);
                suggestMissingLetter(word, hashTable);
                suggestExtraLetter(word, hashTable);
                printf("\n");

                if (insertToDictionary) {
                    insert(hashTable, word);
                }
            }
                 
			word = strtok(NULL,delimiter); 
		}
	}
	fclose(fp);
    
    //HINT: If the flag noTypo is not altered (which you should do in the loop above if there exists a word not in the dictionary), then you should print "No typo!"
    if(noTypo==1)
        printf("No typo!\n");
    

    // DON'T FORGET to free the memory that you allocated
    freeHashTable(hashTable);
    free(line);
	return 0;
}

